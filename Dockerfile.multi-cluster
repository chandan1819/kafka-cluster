# Multi-stage build for production multi-cluster Kafka manager
FROM python:3.11-slim as builder

# Set build arguments
ARG BUILD_DATE
ARG VERSION
ARG VCS_REF

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN groupadd -r kafka && useradd -r -g kafka kafka

# Set working directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt requirements-prod.txt ./

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements-prod.txt

# Copy application code
COPY . .

# Install the application
RUN pip install --no-cache-dir -e .

# Production stage
FROM python:3.11-slim as production

# Set labels
LABEL maintainer="Multi-Cluster Kafka Manager Team"
LABEL version="${VERSION}"
LABEL build-date="${BUILD_DATE}"
LABEL vcs-ref="${VCS_REF}"
LABEL description="Multi-Cluster Kafka Manager - Production Ready"

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    docker.io \
    postgresql-client \
    redis-tools \
    jq \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create app user and directories
RUN groupadd -r kafka && useradd -r -g kafka kafka
RUN mkdir -p /app/data /app/logs /app/backups /app/config && \
    chown -R kafka:kafka /app

# Set working directory
WORKDIR /app

# Copy from builder stage
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin
COPY --from=builder --chown=kafka:kafka /app .

# Copy production configuration
COPY --chown=kafka:kafka config/production.yml /app/config/
COPY --chown=kafka:kafka scripts/entrypoint.sh /app/
COPY --chown=kafka:kafka scripts/healthcheck.sh /app/

# Make scripts executable
RUN chmod +x /app/entrypoint.sh /app/healthcheck.sh

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV ENVIRONMENT=production
ENV LOG_LEVEL=INFO
ENV WORKERS=4
ENV MAX_REQUESTS=1000
ENV MAX_REQUESTS_JITTER=100
ENV TIMEOUT=30
ENV KEEPALIVE=2

# Expose ports
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /app/healthcheck.sh

# Switch to non-root user
USER kafka

# Set entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]

# Default command
CMD ["gunicorn", "--config", "/app/config/gunicorn.conf.py", "src.main:app"]