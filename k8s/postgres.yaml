apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: multi-cluster-kafka
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: multi-cluster-kafka-manager
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - kafka_user
            - -d
            - multi_cluster_db
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - kafka_user
            - -d
            - multi_cluster_db
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi
      storageClassName: fast-ssd

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: multi-cluster-kafka
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
spec:
  selector:
    app.kubernetes.io/name: postgres
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: multi-cluster-kafka
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
data:
  init-db.sql: |
    -- Create extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    
    -- Create schemas
    CREATE SCHEMA IF NOT EXISTS clusters;
    CREATE SCHEMA IF NOT EXISTS monitoring;
    CREATE SCHEMA IF NOT EXISTS security;
    
    -- Create indexes for performance
    CREATE INDEX IF NOT EXISTS idx_clusters_environment ON clusters.cluster_definitions(environment);
    CREATE INDEX IF NOT EXISTS idx_clusters_status ON clusters.cluster_definitions(status);
    CREATE INDEX IF NOT EXISTS idx_clusters_created_at ON clusters.cluster_definitions(created_at);
    
    -- Grant permissions
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA clusters TO kafka_user;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA monitoring TO kafka_user;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA security TO kafka_user;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA clusters TO kafka_user;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA monitoring TO kafka_user;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA security TO kafka_user;