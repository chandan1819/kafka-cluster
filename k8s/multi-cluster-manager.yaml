apiVersion: apps/v1
kind: Deployment
metadata:
  name: multi-cluster-manager
  namespace: multi-cluster-kafka
  labels:
    app.kubernetes.io/name: multi-cluster-manager
    app.kubernetes.io/component: application
    app.kubernetes.io/part-of: multi-cluster-kafka-manager
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: multi-cluster-manager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: multi-cluster-manager
        app.kubernetes.io/component: application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: multi-cluster-manager
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: multi-cluster-manager
        image: multi-cluster-kafka-manager:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 8001
          name: metrics
          protocol: TCP
        env:
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: multi-cluster-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: multi-cluster-config
              key: LOG_LEVEL
        - name: DATABASE_URL
          value: "postgresql://$(DB_USER):$(POSTGRES_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)"
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: multi-cluster-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: multi-cluster-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: multi-cluster-config
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)/$(REDIS_DB)"
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: multi-cluster-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: multi-cluster-config
              key: REDIS_PORT
        - name: REDIS_DB
          valueFrom:
            configMapKeyRef:
              name: multi-cluster-config
              key: REDIS_DB
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: multi-cluster-secrets
              key: REDIS_PASSWORD
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: multi-cluster-secrets
              key: SECRET_KEY
        - name: MAX_CLUSTERS
          valueFrom:
            configMapKeyRef:
              name: multi-cluster-config
              key: MAX_CLUSTERS
        - name: PORT_RANGE_START
          valueFrom:
            configMapKeyRef:
              name: multi-cluster-config
              key: PORT_RANGE_START
        - name: PORT_RANGE_END
          valueFrom:
            configMapKeyRef:
              name: multi-cluster-config
              key: PORT_RANGE_END
        - name: ENABLE_MONITORING
          valueFrom:
            configMapKeyRef:
              name: multi-cluster-config
              key: ENABLE_MONITORING
        - name: ENABLE_SECURITY
          valueFrom:
            configMapKeyRef:
              name: multi-cluster-config
              key: ENABLE_SECURITY
        - name: BACKUP_ENABLED
          valueFrom:
            configMapKeyRef:
              name: multi-cluster-config
              key: BACKUP_ENABLED
        - name: HEALTH_CHECK_INTERVAL
          valueFrom:
            configMapKeyRef:
              name: multi-cluster-config
              key: HEALTH_CHECK_INTERVAL
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
        - name: config-volume
          mountPath: /app/config
        - name: docker-socket
          mountPath: /var/run/docker.sock
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: multi-cluster-data-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: multi-cluster-logs-pvc
      - name: config-volume
        configMap:
          name: multi-cluster-config
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
          type: Socket
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "multi-cluster-kafka"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - multi-cluster-manager
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: multi-cluster-manager-service
  namespace: multi-cluster-kafka
  labels:
    app.kubernetes.io/name: multi-cluster-manager
    app.kubernetes.io/component: application
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8001"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app.kubernetes.io/name: multi-cluster-manager
  ports:
  - name: http
    port: 8000
    targetPort: 8000
    protocol: TCP
  - name: metrics
    port: 8001
    targetPort: 8001
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: multi-cluster-manager
  namespace: multi-cluster-kafka
  labels:
    app.kubernetes.io/name: multi-cluster-manager
    app.kubernetes.io/component: application

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: multi-cluster-manager
  labels:
    app.kubernetes.io/name: multi-cluster-manager
    app.kubernetes.io/component: application
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses", "networkpolicies"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: multi-cluster-manager
  labels:
    app.kubernetes.io/name: multi-cluster-manager
    app.kubernetes.io/component: application
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: multi-cluster-manager
subjects:
- kind: ServiceAccount
  name: multi-cluster-manager
  namespace: multi-cluster-kafka

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: multi-cluster-data-pvc
  namespace: multi-cluster-kafka
  labels:
    app.kubernetes.io/name: multi-cluster-manager
    app.kubernetes.io/component: storage
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: multi-cluster-logs-pvc
  namespace: multi-cluster-kafka
  labels:
    app.kubernetes.io/name: multi-cluster-manager
    app.kubernetes.io/component: storage
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd